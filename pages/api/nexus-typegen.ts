/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */







declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Categorie: { // root type
    id?: number | null; // Int
    libelle?: string | null; // String
  }
  Cours: { // root type
    contenuMd?: string | null; // String
    dateParution?: number | null; // Int
    dateRedaction?: number | null; // Int
    estArchive?: boolean | null; // Boolean
    id?: number | null; // Int
    nbConssultation?: number | null; // Int
    resume?: string | null; // String
    titre?: string | null; // String
  }
  Mutation: {};
  Query: {};
  Role: { // root type
    id?: number | null; // Int
    role?: string | null; // String
  }
  Utilisateur: { // root type
    email?: string | null; // String
    id?: number | null; // Int
    name?: string | null; // String
    password?: string | null; // String
  }
  coursCategorie: { // root type
    id?: number | null; // Int
  }
  notesCours: { // root type
    annotation?: string | null; // String
    date?: number | null; // Int
    id?: number | null; // Int
    note?: number | null; // Int
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Categorie: { // field return type
    categorieMere: NexusGenRootTypes['Categorie'] | null; // Categorie
    coursCategorie: Array<NexusGenRootTypes['coursCategorie'] | null> | null; // [coursCategorie]
    id: number | null; // Int
    libelle: string | null; // String
  }
  Cours: { // field return type
    author: NexusGenRootTypes['Utilisateur'] | null; // Utilisateur
    contenuMd: string | null; // String
    dateParution: number | null; // Int
    dateRedaction: number | null; // Int
    estArchive: boolean | null; // Boolean
    id: number | null; // Int
    nbConssultation: number | null; // Int
    resume: string | null; // String
    titre: string | null; // String
  }
  Mutation: { // field return type
    createDraft: NexusGenRootTypes['Cours'] | null; // Cours
    deletePost: NexusGenRootTypes['Cours'] | null; // Cours
    publish: NexusGenRootTypes['Cours'] | null; // Cours
    signupUser: NexusGenRootTypes['Utilisateur'] | null; // Utilisateur
  }
  Query: { // field return type
    cours: NexusGenRootTypes['Cours'] | null; // Cours
    drafts: Array<NexusGenRootTypes['Cours'] | null> | null; // [Cours]
    feed: Array<NexusGenRootTypes['Cours'] | null> | null; // [Cours]
    filterCours: Array<NexusGenRootTypes['Cours'] | null> | null; // [Cours]
  }
  Role: { // field return type
    Utilisateur: Array<NexusGenRootTypes['Utilisateur'] | null> | null; // [Utilisateur]
    id: number | null; // Int
    role: string | null; // String
  }
  Utilisateur: { // field return type
    Cours: Array<NexusGenRootTypes['Cours'] | null> | null; // [Cours]
    email: string | null; // String
    id: number | null; // Int
    name: string | null; // String
    notesCours: Array<NexusGenRootTypes['notesCours'] | null> | null; // [notesCours]
    password: string | null; // String
    role: NexusGenRootTypes['Role'] | null; // Role
  }
  coursCategorie: { // field return type
    categorie: NexusGenRootTypes['Categorie'] | null; // Categorie
    cour: NexusGenRootTypes['Cours'] | null; // Cours
    id: number | null; // Int
  }
  notesCours: { // field return type
    annotation: string | null; // String
    cour: NexusGenRootTypes['Cours'] | null; // Cours
    date: number | null; // Int
    id: number | null; // Int
    note: number | null; // Int
    utilisateur: NexusGenRootTypes['Utilisateur'] | null; // Utilisateur
  }
}

export interface NexusGenFieldTypeNames {
  Categorie: { // field return type name
    categorieMere: 'Categorie'
    coursCategorie: 'coursCategorie'
    id: 'Int'
    libelle: 'String'
  }
  Cours: { // field return type name
    author: 'Utilisateur'
    contenuMd: 'String'
    dateParution: 'Int'
    dateRedaction: 'Int'
    estArchive: 'Boolean'
    id: 'Int'
    nbConssultation: 'Int'
    resume: 'String'
    titre: 'String'
  }
  Mutation: { // field return type name
    createDraft: 'Cours'
    deletePost: 'Cours'
    publish: 'Cours'
    signupUser: 'Utilisateur'
  }
  Query: { // field return type name
    cours: 'Cours'
    drafts: 'Cours'
    feed: 'Cours'
    filterCours: 'Cours'
  }
  Role: { // field return type name
    Utilisateur: 'Utilisateur'
    id: 'Int'
    role: 'String'
  }
  Utilisateur: { // field return type name
    Cours: 'Cours'
    email: 'String'
    id: 'Int'
    name: 'String'
    notesCours: 'notesCours'
    password: 'String'
    role: 'Role'
  }
  coursCategorie: { // field return type name
    categorie: 'Categorie'
    cour: 'Cours'
    id: 'Int'
  }
  notesCours: { // field return type name
    annotation: 'String'
    cour: 'Cours'
    date: 'Int'
    id: 'Int'
    note: 'Int'
    utilisateur: 'Utilisateur'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createDraft: { // args
      authorEmail?: string | null; // String
      contentMd?: string | null; // String
      titre: string; // String!
    }
    deletePost: { // args
      coursId?: string | null; // String
    }
    publish: { // args
      coursId?: string | null; // String
    }
    signupUser: { // args
      email: string; // String!
      name?: string | null; // String
      password: string; // String!
    }
  }
  Query: {
    cours: { // args
      coursId: string; // String!
    }
    filterCours: { // args
      searchString?: string | null; // String
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}